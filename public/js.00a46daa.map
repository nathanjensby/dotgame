{"version":3,"sources":["js/util.js","js/index.js"],"names":["randomNumber","min","max","Math","floor","random","slider","document","querySelector","scoreDisplay","innerHTML","startButton","lanes","querySelectorAll","gameState","currentSpeed","value","score","isPlaying","myInterval","addCircle","circlePointData","circleData","lane","size","pointValue","circleComponent","createElement","classList","add","setAttribute","determineAnimationTime","addEventListener","addCircleToScore","removeCircle","appendChild","updateScore","amtToAdd","windowHeight","window","innerHeight","desiredFallRate","dataset","pointvalue","removeEventListener","parentNode","removeChild","updateSliderDisplay","newValue","event","target","setInterval","clearInterval","circles","forEach","circle","style","WebkitAnimationPlayState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAxD;AAAA,CAArB;;;;;;ACAP;;AAEA,IAAMK,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAf;AACA,IAAMC,YAAY,GAAGF,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAArB;AACAC,YAAY,CAACC,SAAb,GAAyB,CAAzB;AACA,IAAMC,WAAW,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAApB;AACA,IAAMI,KAAK,GAAGL,QAAQ,CAACM,gBAAT,CAA0B,WAA1B,CAAd,EAEA;;AACA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAET,MAAM,CAACU,KADL;AAEhBC,EAAAA,KAAK,EAAE,CAFS;AAGhBC,EAAAA,SAAS,EAAE;AAHK,CAAlB;AAKA,IAAIC,UAAJ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMC,eAAe,GAAG,wBAAa,CAAb,EAAgB,EAAhB,CAAxB;AACA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAEX,KAAK,CAAC,wBAAa,CAAb,EAAgB,CAAhB,CAAD,CADM;AAEjBY,IAAAA,IAAI,YAAKH,eAAe,GAAG,EAAvB,OAFa;AAGjBI,IAAAA,UAAU,EAAE,KAAKJ;AAHA,GAAnB;AAMA,MAAMK,eAAe,GAAGnB,QAAQ,CAACoB,aAAT,CAAuB,KAAvB,CAAxB;AACAD,EAAAA,eAAe,CAACE,SAAhB,CAA0BC,GAA1B,CAA8B,YAA9B;AACAH,EAAAA,eAAe,CAACI,YAAhB,CAA6B,OAA7B,oBAAiDR,UAAU,CAACE,IAA5D,sBAA4EF,UAAU,CAACE,IAAvF,oCAAqHO,sBAAsB,EAA3I;AACAL,EAAAA,eAAe,CAACI,YAAhB,CAA6B,iBAA7B,YAAmDR,UAAU,CAACG,UAA9D;AACAC,EAAAA,eAAe,CAACM,gBAAhB,CAAiC,OAAjC,EAA0C;AAAA,WAAMC,gBAAgB,CAACP,eAAD,CAAtB;AAAA,GAA1C;AACAA,EAAAA,eAAe,CAACM,gBAAhB,CAAiC,cAAjC,EAAiD;AAAA,WAAME,YAAY,CAACR,eAAD,CAAlB;AAAA,GAAjD;AAEAJ,EAAAA,UAAU,CAACC,IAAX,CAAgBY,WAAhB,CAA4BT,eAA5B;AACD,CAhBD;;AAkBA,IAAMU,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AAChCvB,EAAAA,SAAS,CAACG,KAAV,IAAmB,CAACoB,QAApB;AACA5B,EAAAA,YAAY,CAACC,SAAb,GAAyBI,SAAS,CAACG,KAAnC;AACD,CAHD;;AAKA,IAAMc,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,MAAMO,YAAY,GAAGC,MAAM,CAACC,WAA5B;AACA,MAAMC,eAAe,GAAG3B,SAAS,CAACC,YAAlC;AACA,SAAOuB,YAAY,GAAGG,eAAtB;AACD,CAJD;;AAMA,IAAMR,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,eAAD,EAAqB;AAC5C,MAAIZ,SAAS,CAACI,SAAd,EAAyB;AACvBkB,IAAAA,WAAW,CAACV,eAAe,CAACgB,OAAhB,CAAwBC,UAAzB,CAAX;AACAT,IAAAA,YAAY,CAACR,eAAD,CAAZ;AACD;AACF,CALD;;AAOA,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACR,eAAD,EAAqB;AACxCA,EAAAA,eAAe,CAACkB,mBAAhB,CAAoC,cAApC,EAAoDV,YAApD;AACAR,EAAAA,eAAe,CAACmB,UAAhB,CAA2BC,WAA3B,CAAuCpB,eAAvC;AACD,CAHD;;AAKA,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAc;AACxCzC,EAAAA,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCE,SAAxC,GAAoDsC,QAApD;AACD,CAFD,EAIA;;;AACA1C,MAAM,CAAC0B,gBAAP,CAAwB,OAAxB,EAAiC,UAACiB,KAAD,EAAW;AAAA,MAClCjC,KADkC,GACxBiC,KAAK,CAACC,MADkB,CAClClC,KADkC;AAE1CF,EAAAA,SAAS,CAACC,YAAV,GAAyBC,KAAzB;AACA+B,EAAAA,mBAAmB,CAAC/B,KAAD,CAAnB;AACD,CAJD,GAMA;;AACAL,WAAW,CAACqB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAAA,MAClCd,SADkC,GACpBJ,SADoB,CAClCI,SADkC;AAE1CJ,EAAAA,SAAS,CAACI,SAAV,GAAsB,CAACA,SAAvB;AACAP,EAAAA,WAAW,CAACD,SAAZ,GAAwBI,SAAS,CAACI,SAAV,GAAsB,OAAtB,GAAgC,OAAxD,CAH0C,CAK1C;;AACA,MAAIJ,SAAS,CAACI,SAAd,EAAyB;AACvBC,IAAAA,UAAU,GAAGgC,WAAW,CAAC/B,SAAD,EAAY,IAAZ,CAAxB;AACD,GAFD,MAEO;AACLgC,IAAAA,aAAa,CAACjC,UAAD,CAAb;AACD,GAVyC,CAY1C;;;AACA,MAAMkC,OAAO,GAAG9C,QAAQ,CAACM,gBAAT,CAA0B,aAA1B,CAAhB;AACAwC,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1BA,IAAAA,MAAM,CAACC,KAAP,CAAaC,wBAAb,GAAwC3C,SAAS,CAACI,SAAV,GAAsB,SAAtB,GAAkC,QAA1E;AACD,GAFD;AAGD,CAjBD","file":"js.00a46daa.map","sourceRoot":"../src","sourcesContent":["export const randomNumber = (min, max) => Math.floor(Math.random() * (max - min)) + min;","import { randomNumber } from './util.js';\n\nconst slider = document.querySelector('#speedControl');\nconst scoreDisplay = document.querySelector('#currentScore');\nscoreDisplay.innerHTML = 0;\nconst startButton = document.querySelector('#startButton');\nconst lanes = document.querySelectorAll('.dropLane');\n\n// Global variables\nconst gameState = {\n  currentSpeed: slider.value,\n  score: 0,\n  isPlaying: false\n};\nlet myInterval;\n\nconst addCircle = () => {\n  const circlePointData = randomNumber(1, 11);\n  const circleData = {\n    lane: lanes[randomNumber(0, 8)],\n    size: `${circlePointData * 10}px`,\n    pointValue: 11 - circlePointData\n  };\n\n  const circleComponent = document.createElement('div');\n  circleComponent.classList.add('testCircle');\n  circleComponent.setAttribute(\"style\", `height: ${circleData.size}; width: ${circleData.size}; animation: slideDown ${determineAnimationTime()}s linear`);\n  circleComponent.setAttribute(\"data-pointValue\", `${circleData.pointValue}`);\n  circleComponent.addEventListener(\"click\", () => addCircleToScore(circleComponent));\n  circleComponent.addEventListener(\"animationend\", () => removeCircle(circleComponent));\n\n  circleData.lane.appendChild(circleComponent)\n}\n\nconst updateScore = (amtToAdd) => {\n  gameState.score += +amtToAdd;\n  scoreDisplay.innerHTML = gameState.score;\n}\n\nconst determineAnimationTime = () => {\n  const windowHeight = window.innerHeight;\n  const desiredFallRate = gameState.currentSpeed;\n  return windowHeight / desiredFallRate;\n}\n\nconst addCircleToScore = (circleComponent) => {\n  if (gameState.isPlaying) {\n    updateScore(circleComponent.dataset.pointvalue);\n    removeCircle(circleComponent);\n  }\n}\n\nconst removeCircle = (circleComponent) => {\n  circleComponent.removeEventListener(\"animationend\", removeCircle);\n  circleComponent.parentNode.removeChild(circleComponent);\n}\n\nconst updateSliderDisplay = (newValue) => {\n  document.querySelector('#currentSpeed').innerHTML = newValue;\n}\n\n// Update currentSpeed when slider is adjusted\nslider.addEventListener('input', (event) => {\n  const { value } = event.target;\n  gameState.currentSpeed = value;\n  updateSliderDisplay(value);\n});\n\n// Capture button press\nstartButton.addEventListener('click', () => {\n  const { isPlaying } = gameState;\n  gameState.isPlaying = !isPlaying;\n  startButton.innerHTML = gameState.isPlaying ? 'Pause' : 'Start';\n\n  // Add a circle to a random lane every second\n  if (gameState.isPlaying) {\n    myInterval = setInterval(addCircle, 1000);\n  } else {\n    clearInterval(myInterval);\n  }\n\n  // Grab all circles from the dom and pause animation\n  const circles = document.querySelectorAll('.testCircle');\n  circles.forEach((circle) => {\n    circle.style.WebkitAnimationPlayState = gameState.isPlaying ? 'running' : 'paused';\n  })\n})"]}